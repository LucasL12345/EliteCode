[
    {
      "id": 1,
      "title": "Sorted list",
      "description": "given an array of integers, return the list sorted in non-decreasing order",
      "solution_text": "For this problem, we need to sort the list from the smallest number to the largest. To do so, we can simply use python's 'sorted' function which performs the sorting for you using a Tim sort (which is a combination of both merge sort and insertion sort). \n Alternatively, you could manually write out the code for a sorting algorithm, such as a Bubble sort, Selection sort, Insersion sort, Heap sort, Quick sort, or Merge sort. These are the most well known sorting algorithms but there are more! Note that different sorting algorithms will have different time and space complexities.",
      "solution_code": "def sort_list(lst):\n  #newline \n #new line \n return sorted(lst)",
      "solution_time_complexity": "O(n log n)",
      "solution_space_complexity": "O(n)",
      "functionName": "sort_list",
      "boilerplate": "def sort_list(lst):\n    # Write your code here\n    return\n",
      "difficulty": "Easy",
      "testCases": [
        {
          "input": [4,2,3,5,1],
          "expectedOutput": [1,2,3,4,5]
        },
        {
          "input": [1],
          "expectedOutput": [1]
        }
      ]
    },
    {
      "id": 2,
      "title": "Sum array",
      "description": "return the sum of all numbers in the array",
      "solution_text": "given an array of integers, return the list sorted in non-decreasing order",
      "solution_code": "def sort_list(lst):\n    return sorted(lst)",
      "solution_time_complexity": "O(n log n)",
      "solution_space_complexity": "O(n)",
      "functionName": "sum_list",
      "boilerplate": "def sum_list(lst):\n    # Write your code here\n    return\n",
      "difficulty": "Easy",
      "testCases": [
        {
            "input": [3,4,5],
            "expectedOutput": 12
        },
        {
            "input": [1],
            "expectedOutput": 1
        }
      ]
    },
    {
      "id": 3,
      "title": "Two sum",
      "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. \nYou may assume that each input would have exactly one solution, and you may not use the same element twice. \nYou can return the answer in any order.",
      "solution_text": "given an array of integers, return the list sorted in non-decreasing order",
      "solution_code": "def sort_list(lst):\n    return sorted(lst)",
      "solution_time_complexity": "O(n log n)",
      "solution_space_complexity": "O(n)",
      "functionName": "sum_list",
      "boilerplate": "def sum_list(lst):\n    # Write your code here\n    return\n",
      "difficulty": "Medium",
      "testCases": [
        {
            "input": [3,4,5],
            "expectedOutput": 12
        },
        {
            "input": [1],
            "expectedOutput": 1
        }
      ]
    },
    {
      "id": 4,
      "title": "Longest substring without repeating characters",
      "description": "return the sum of all numbers in the array",
      "solution_text": "given an array of integers, return the list sorted in non-decreasing order",
      "solution_code": "def sort_list(lst):\n    return sorted(lst)",
      "solution_time_complexity": "O(n log n)",
      "solution_space_complexity": "O(n)",
      "functionName": "sum_list",
      "boilerplate": "def sum_list(lst):\n    # Write your code here\n    return\n",
      "difficulty": "Hard",
      "testCases": [
        {
            "input": [3,4,5],
            "expectedOutput": 12
        },
        {
            "input": [1],
            "expectedOutput": 1
        }
      ]
    }
]
